You are building a full-stack project called **IRP ChatBot**, a medical health registry assistant.

The chatbot allows doctors to query patient registry data (from predefined Oracle DB views) in natural language. 
The system responds with either **tabular form** or **visualizations** (bar, line, pie charts). 
Use **full JavaScript stack**. Make the project **modular** with config files for DB and API keys.

---

### Requirements

1. **Project Structure**
   - `frontend/` → React + Tailwind CSS + Recharts
   - `backend/` → Node.js + Express + oracledb + OpenAI SDK
   - `config/` → store DB connection and API keys in `.env` or `config.js`
   - `docs/` → detailed documentation (see section 9 below)
   - `docker-compose.yml` → run frontend + backend together
   - `README.md` → short overview + reference to docs

2. **Frontend (React + Tailwind + Recharts)**
   - Blue & white theme, professional but friendly.
   - Layout:
     - Navbar with project name: *IRP ChatBot*
     - Input panel:
       - Textbox for natural language query
       - Dropdown/toggle for visualization type (Table, Bar, Line, Pie)
       - Submit button
     - Results panel:
       - Display table if response is tabular
       - Display charts using Recharts if visualization requested
   - Responsive (desktop + tablet)
   - Add loading + error states

3. **Backend (Node.js + Express)**
   - Endpoints:
     - `POST /query` → accepts query text + viz type
       - Calls OpenAI API to translate NL → Oracle SQL
       - Executes SQL securely (parameterized) using `oracledb`
       - Returns structured JSON (columns, rows, metadata)
   - Config:
     - Store Oracle DB creds + OpenAI API key in `config/config.js` (pulled from `.env`)
     - Example config:
       ```js
       module.exports = {
         db: {
           user: process.env.DB_USER,
           password: process.env.DB_PASSWORD,
           connectString: process.env.DB_CONNECT_STRING
         },
         openai: {
           apiKey: process.env.OPENAI_API_KEY
         }
       }
       ```
   - Middleware: error handling, logging
   - Example response:
     ```json
     {
       "type": "table",
       "columns": ["age_group", "patient_count"],
       "rows": [["0-18", 50], ["19-40", 120]]
     }
     ```

4. **DB Connection (Oracle)**
   - Use `oracledb` npm package
   - Connect only to read-only views (`patient_summary_view`, `treatment_outcomes_view`)
   - Example query execution:
     ```js
     const result = await connection.execute(
       `SELECT age_group, COUNT(*) as patient_count 
        FROM patient_summary_view 
        GROUP BY age_group`
     );
     ```

5. **AI Integration (OpenAI)**
   - Use official OpenAI Node SDK
   - Prompt the model:
     ```
     You are an assistant that converts natural language questions into valid Oracle SQL queries.
     Only use the following views: patient_summary_view, treatment_outcomes_view.
     ```
   - Model output = SQL query
   - Execute SQL on Oracle, return result + explanation

6. **Visualization**
   - Frontend maps JSON to table or chart
   - Example: if `viz=bar`, map x-axis = column1, y-axis = column2
   - Dynamic rendering based on response

7. **Modularity**
   - No hardcoded credentials
   - Centralized `config/config.js` + `.env` file
   - Clear separation of concerns:
     - `frontend/` handles UI
     - `backend/` handles API + DB + AI
     - `config/` handles secrets/keys

8. **Starter Example**
   - Implement one working example query:
     - Input: “Show number of patients by gender”
     - SQL: `SELECT gender, COUNT(*) FROM patient_summary_view GROUP BY gender`
     - Display as table + bar chart

9. **Documentation (in `/docs`)**
   - Generate a detailed document (`docs/setup_guide.md`) explaining:
     - Project overview
     - Folder structure
     - How to install dependencies
     - How to configure `.env` and `config/config.js`
     - How to run backend and frontend (both standalone and via docker-compose)
     - Example queries and expected outputs
     - How to extend (add more views, add new visualization types)
   - Generate a `docs/user_guide.md` for end-users (doctors) that explains:
     - How to access the chatbot
     - How to type queries in natural language
     - How to choose visualization types
     - Example questions they can ask

---

### Task
Generate the **full modular project scaffold** with:
- React frontend (with one example query UI)
- Express backend (with `/query` endpoint)
- Oracle DB connection via `config/config.js`
- OpenAI integration for NL → SQL
- Demo visualization (table + bar chart)
- `/docs/setup_guide.md` (developer guide)
- `/docs/user_guide.md` (doctor-facing usage guide)
